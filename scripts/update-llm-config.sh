#!/bin/bash

# DataHawk - Script para Atualizar Configura√ß√µes LLM
# Atualiza configura√ß√µes para usar o novo servidor LLM de produ√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß DataHawk - Atualizando Configura√ß√µes LLM${NC}"
echo "=============================================="

# Fun√ß√£o para backup de arquivo
backup_file() {
    local file=$1
    if [ -f "$file" ]; then
        cp "$file" "$file.backup.$(date +%Y%m%d_%H%M%S)"
        echo -e "${GREEN}‚úÖ Backup criado: $file.backup.$(date +%Y%m%d_%H%M%S)${NC}"
    fi
}

# Fun√ß√£o para atualizar configura√ß√µes TypeScript
update_typescript_configs() {
    echo -e "\n${YELLOW}üìù Atualizando configura√ß√µes TypeScript...${NC}"

    # Atualizar configura√ß√µes padr√£o no taskmaster
    local taskmaster_file="src/core/taskmaster.ts"
    if [ -f "$taskmaster_file" ]; then
        backup_file "$taskmaster_file"

        # Substituir modelo padr√£o para phi-3-mini
        sed -i 's/modelPath: .\/models\/mistral-7b-instruct-q4_k_m.gguf/modelPath: .\/models\/phi-3-mini-4k-instruct.Q4_K_M.gguf/g' "$taskmaster_file"

        # Reduzir configura√ß√µes para modelos menores
        sed -i 's/contextSize: 4096/contextSize: 2048/g' "$taskmaster_file"
        sed -i 's/batchSize: 512/batchSize: 128/g' "$taskmaster_file"
        sed -i 's/threads: 4/threads: 3/g' "$taskmaster_file"
        sed -i 's/maxTokens: 512/maxTokens: 10/g' "$taskmaster_file"

        echo -e "${GREEN}‚úÖ Taskmaster atualizado${NC}"
    fi

    # Atualizar crew orchestrator
    local crew_file="src/agents/crew-orchestrator.ts"
    if [ -f "$crew_file" ]; then
        backup_file "$crew_file"

        # Substituir modelos padr√£o
        sed -i 's/modelPath: .\/models\/llama3-8b-instruct.Q4_K_M.gguf/modelPath: .\/models\/phi-3-mini-4k-instruct.Q4_K_M.gguf/g' "$crew_file"
        sed -i 's/fallbackModelPath: .\/models\/phi-3-mini-4k-instruct.Q4_K_M.gguf/fallbackModelPath: .\/models\/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf/g' "$crew_file"

        # Reduzir configura√ß√µes
        sed -i 's/contextSize: 8192/contextSize: 2048/g' "$crew_file"
        sed -i 's/batchSize: 512/batchSize: 128/g' "$crew_file"
        sed -i 's/maxTokens: 1024/maxTokens: 10/g' "$crew_file"

        echo -e "${GREEN}‚úÖ Crew Orchestrator atualizado${NC}"
    fi
}

# Fun√ß√£o para atualizar configura√ß√µes YAML
update_yaml_configs() {
    echo -e "\n${YELLOW}üìù Atualizando configura√ß√µes YAML...${NC}"

    # Buscar arquivos de configura√ß√£o YAML
    for config_file in config/*.yaml; do
        if [ -f "$config_file" ]; then
            backup_file "$config_file"

            # N√£o h√° configura√ß√µes espec√≠ficas de LLM nos YAMLs atuais
            # Mas preparar para futuras configura√ß√µes
            echo -e "${BLUE}‚ÑπÔ∏è Verificado: $config_file${NC}"
        fi
    done
}

# Fun√ß√£o para criar arquivo de configura√ß√£o de produ√ß√£o
create_production_config() {
    echo -e "\n${YELLOW}üìù Criando configura√ß√£o de produ√ß√£o...${NC}"

    cat > "llm-production.yaml" << EOF
# Configura√ß√£o LLM de Produ√ß√£o - DataHawk
# Otimizada para modelos pequenos e est√°veis

llm:
  # Servidor de produ√ß√£o
  server:
    url: "http://localhost:8000"
    health_check_interval: 30 # segundos
    timeout: 10 # segundos
    max_retries: 3

  # Modelos suportados (em ordem de prefer√™ncia)
  models:
    - name: "tinyllama"
      path: "models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf"
      memory_gb: 1.5
      description: "Ultra r√°pido, baixo consumo"

    - name: "qwen-1.8b"
      path: "models/qwen1.5-1.8b-chat.Q4_K_M.gguf"
      memory_gb: 2.0
      description: "Bom para racioc√≠nio num√©rico"

    - name: "gemma-2b"
      path: "models/gemma-2b-it.Q4_K_M.gguf"
      memory_gb: 2.5
      description: "Equilibrado, bom PT-BR"

    - name: "phi3-mini"
      path: "models/phi-3-mini-4k-instruct.Q4_K_M.gguf"
      memory_gb: 3.5
      description: "Qualidade superior"

  # Configura√ß√µes otimizadas
  settings:
    context_size: 2048
    batch_size: 128
    threads: 3
    temperature: 0.1
    max_tokens: 10

  # Valida√ß√£o espec√≠fica
  validation:
    enable_fallback: true
    confidence_threshold: 0.7
    max_prompt_length: 200
    simple_prompts: true # Para modelos pequenos
EOF

    echo -e "${GREEN}‚úÖ Arquivo llm-production.yaml criado${NC}"
}

# Fun√ß√£o para atualizar README
update_readme() {
    echo -e "\n${YELLOW}üìù Atualizando README...${NC}"

    local readme_file="README.md"
    if [ -f "$readme_file" ]; then
        backup_file "$readme_file"

        # Adicionar se√ß√£o sobre modelos pequenos
        cat >> "$readme_file" << 'EOF'

## ü§ñ Modelos LLM Recomendados

O DataHawk agora suporta modelos menores e mais est√°veis:

| Modelo | Tamanho | RAM Necess√°ria | Melhor Para |
|--------|---------|----------------|-------------|
| TinyLlama 1.1B | ~0.8GB | 2GB | Valida√ß√µes r√°pidas, RAM limitada |
| Qwen 1.8B | ~1.2GB | 3GB | Racioc√≠nio num√©rico, compara√ß√µes |
| Gemma 2B | ~1.5GB | 3.5GB | Portugu√™s, valida√ß√µes complexas |
| Phi-3 Mini | ~2.7GB | 4GB | Qualidade superior geral |

### Download Autom√°tico

```bash
# Baixar modelos recomendados
chmod +x scripts/download-recommended-models.sh
./scripts/download-recommended-models.sh
```

### Servidor LLM de Produ√ß√£o

```bash
# Iniciar servidor LLM otimizado
python3 llm-server-production.py

# Verificar modelos dispon√≠veis
curl http://localhost:8000/models
```

EOF

        echo -e "${GREEN}‚úÖ README atualizado${NC}"
    fi
}

# Fun√ß√£o para criar script de in√≠cio
create_start_script() {
    echo -e "\n${YELLOW}üìù Criando script de in√≠cio...${NC}"

    cat > "start-datahawk.sh" << 'EOF'
#!/bin/bash

# DataHawk - Script de In√≠cio Completo
# Inicia todos os servi√ßos necess√°rios

set -e

echo "üöÄ Iniciando DataHawk..."

# Verificar se modelos existem
if [ ! -f "models/phi-3-mini-4k-instruct.Q4_K_M.gguf" ] && \
   [ ! -f "models/gemma-2b-it.Q4_K_M.gguf" ] && \
   [ ! -f "models/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf" ]; then
    echo "‚ùå Nenhum modelo LLM encontrado!"
    echo "üí° Execute: ./scripts/download-recommended-models.sh"
    exit 1
fi

# Criar diret√≥rios necess√°rios
mkdir -p logs tests data

# Iniciar servidor OCR (se necess√°rio)
if ! curl -s http://localhost:5000/health > /dev/null 2>&1; then
    echo "üîç Iniciando servidor OCR..."
    cd src/ocr && bash start-python-ocr.sh &
    cd ../..
    sleep 3
fi

# Iniciar servidor LLM
if ! curl -s http://localhost:8000/health > /dev/null 2>&1; then
    echo "ü§ñ Iniciando servidor LLM..."
    python3 llm-server-production.py &
    sleep 5
fi

# Verificar se servi√ßos est√£o rodando
echo "üîç Verificando servi√ßos..."

if curl -s http://localhost:8000/health | grep -q "healthy"; then
    echo "‚úÖ Servidor LLM funcionando"
else
    echo "‚ùå Servidor LLM n√£o est√° respondendo"
    exit 1
fi

if curl -s http://localhost:5000/health | grep -q "healthy"; then
    echo "‚úÖ Servidor OCR funcionando"
else
    echo "‚ö†Ô∏è Servidor OCR n√£o est√° respondendo (continuando...)"
fi

echo ""
echo "üéâ DataHawk iniciado com sucesso!"
echo "üìä Status dos servi√ßos:"
echo "   LLM: http://localhost:8000/health"
echo "   OCR: http://localhost:5000/health"
echo ""
echo "üí° Para executar valida√ß√£o:"
echo "   node dist/main.js validate --input data/sample.csv --config config/complete-validation.yaml"
EOF

    chmod +x "start-datahawk.sh"
    echo -e "${GREEN}‚úÖ Script start-datahawk.sh criado${NC}"
}

# Fun√ß√£o principal
main() {
    echo -e "\n${BLUE}üîÑ Iniciando atualiza√ß√£o das configura√ß√µes...${NC}"

    # Verificar se estamos no diret√≥rio correto
    if [ ! -f "package.json" ]; then
        echo -e "${RED}‚ùå Execute este script no diret√≥rio raiz do projeto DataHawk${NC}"
        exit 1
    fi

    # Executar atualiza√ß√µes
    update_typescript_configs
    update_yaml_configs
    create_production_config
    update_readme
    create_start_script

    echo -e "\n${GREEN}‚úÖ Configura√ß√µes atualizadas com sucesso!${NC}"
    echo -e "\n${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo "1. Recompilar o projeto: npm run build"
    echo "2. Baixar modelos: ./scripts/download-recommended-models.sh"
    echo "3. Iniciar servi√ßos: ./start-datahawk.sh"
    echo "4. Testar sistema: node dist/main.js validate --input data/sample.csv --config config/complete-validation.yaml"

    echo -e "\n${YELLOW}üíæ Backups criados:${NC}"
    find . -name "*.backup.*" -type f 2>/dev/null | head -10
}

# Executar fun√ß√£o principal
main "$@"
